"use strict";(self.webpackChunkelement_web=self.webpackChunkelement_web||[]).push([[4513],{"./node_modules/matrix-js-sdk/src/rust-crypto/index.ts":(e,t,s)=>{s.r(t),s.d(t,{initRustCrypto:()=>me});var i=s("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),r=s("./node_modules/@matrix-org/matrix-sdk-crypto-wasm/pkg/index.js"),n=s("./node_modules/another-json/another-json.js"),o=s.n(n),a=s("./node_modules/matrix-js-sdk/src/@types/membership.ts"),c=s("./node_modules/matrix-js-sdk/src/models/event.ts"),u=s("./node_modules/matrix-js-sdk/src/common-crypto/CryptoBackend.ts"),d=s("./node_modules/matrix-js-sdk/src/logger.ts"),g=s("./node_modules/matrix-js-sdk/src/http-api/index.ts"),h=s("./node_modules/matrix-js-sdk/src/@types/event.ts"),l=s("./node_modules/matrix-js-sdk/src/@types/partials.ts"),y=s("./node_modules/matrix-js-sdk/src/utils.ts"),p=s("./node_modules/matrix-js-sdk/src/crypto-api/index.ts");class m{constructor(e,t,s,n,o){(0,i.A)(this,"prefixedLogger",void 0),(0,i.A)(this,"lazyLoadedMembersResolved",!1),(0,i.A)(this,"currentEncryptionPromise",Promise.resolve()),this.olmMachine=e,this.keyClaimManager=t,this.outgoingRequestManager=s,this.room=n,this.encryptionSettings=o,this.prefixedLogger=d.v.getChild(`[${n.roomId} encryption]`);const a=n.getJoinedMembers();this.olmMachine.updateTrackedUsers(a.map((e=>new r.UserId(e.userId)))).catch((e=>this.prefixedLogger.error("Error initializing tracked users",e)))}onCryptoEvent(e){if(JSON.stringify(this.encryptionSettings)!=JSON.stringify(e))throw new Error("Cannot reconfigure an active RoomEncryptor")}onRoomMembership(e){(e.membership==a.O.Join||e.membership==a.O.Invite&&this.room.shouldEncryptForInvitedMembers())&&this.olmMachine.updateTrackedUsers([new r.UserId(e.userId)]).catch((e=>{this.prefixedLogger.error("Unable to update tracked users",e)}))}async prepareForEncryption(e,t){await this.encryptEvent(null,e,t)}encryptEvent(e,t,s){var i;const r=new d.T(this.prefixedLogger,e?null!==(i=e.getTxnId())&&void 0!==i?i:"":"prepareForEncryption"),n=this.currentEncryptionPromise.catch((()=>{})).then((async()=>{await(0,y.NQ)(r,"ensureEncryptionSession",(async()=>{await this.ensureEncryptionSession(r,t,s)})),e&&await(0,y.NQ)(r,"encryptEventInner",(async()=>{await this.encryptEventInner(r,e)}))}));return this.currentEncryptionPromise=n,n}async ensureEncryptionSession(e,t,s){if("m.megolm.v1.aes-sha2"!==this.encryptionSettings.algorithm)throw new Error(`Cannot encrypt in ${this.room.roomId} for unsupported algorithm '${this.encryptionSettings.algorithm}'`);e.debug("Starting encryption");const i=await this.room.getEncryptionTargetMembers();this.lazyLoadedMembersResolved?(e.debug("Processing outgoing requests in background"),this.outgoingRequestManager.doProcessOutgoingRequests()):(await(0,y.NQ)(this.prefixedLogger,"loadMembersIfNeeded: updateTrackedUsers",(async()=>{await this.olmMachine.updateTrackedUsers(i.map((e=>new r.UserId(e.userId))))})),e.debug("Updated tracked users"),this.lazyLoadedMembersResolved=!0,e.debug("Processing outgoing requests"),await(0,y.NQ)(this.prefixedLogger,"doProcessOutgoingRequests",(async()=>{await this.outgoingRequestManager.doProcessOutgoingRequests()}))),e.debug(`Encrypting for users (shouldEncryptForInvitedMembers: ${this.room.shouldEncryptForInvitedMembers()}):`,i.map((e=>`${e.userId} (${e.membership})`)));const n=i.map((e=>new r.UserId(e.userId)));await(0,y.NQ)(this.prefixedLogger,"ensureSessionsForUsers",(async()=>{await this.keyClaimManager.ensureSessionsForUsers(e,n)}));const o=new r.EncryptionSettings;switch(o.historyVisibility=function(e){switch(e){case l.Jv.Invited:return r.HistoryVisibility.Invited;case l.Jv.Joined:return r.HistoryVisibility.Joined;case l.Jv.Shared:return r.HistoryVisibility.Shared;case l.Jv.WorldReadable:return r.HistoryVisibility.WorldReadable}}(this.room.getHistoryVisibility()),o.algorithm=r.EncryptionAlgorithm.MegolmV1AesSha2,"number"==typeof this.encryptionSettings.rotation_period_ms&&(o.rotationPeriod=BigInt(1e3*this.encryptionSettings.rotation_period_ms)),"number"==typeof this.encryptionSettings.rotation_period_msgs&&(o.rotationPeriodMessages=BigInt(this.encryptionSettings.rotation_period_msgs)),s.kind){case p.DeviceIsolationModeKind.AllDevicesIsolationMode:{var a;const e=null!==(a=this.room.getBlacklistUnverifiedDevices())&&void 0!==a?a:t;o.sharingStrategy=r.CollectStrategy.deviceBasedStrategy(e,s.errorOnVerifiedUserProblems)}break;case p.DeviceIsolationModeKind.OnlySignedDevicesIsolationMode:o.sharingStrategy=r.CollectStrategy.identityBasedStrategy()}await(0,y.NQ)(this.prefixedLogger,"shareRoomKey",(async()=>{const e=await this.olmMachine.shareRoomKey(new r.RoomId(this.room.roomId),n,o);if(e)for(const t of e)await this.outgoingRequestManager.outgoingRequestProcessor.makeOutgoingRequest(t)}))}async forceDiscardSession(){await this.olmMachine.invalidateGroupSession(new r.RoomId(this.room.roomId))&&this.prefixedLogger.info("Discarded existing group session")}async encryptEventInner(e,t){e.debug("Encrypting actual message content");const s=await this.olmMachine.encryptRoomEvent(new r.RoomId(this.room.roomId),t.getType(),JSON.stringify(t.getContent()));t.makeEncrypted(h.Bx.RoomMessageEncrypted,JSON.parse(s),this.olmMachine.identityKeys.curve25519.toBase64(),this.olmMachine.identityKeys.ed25519.toBase64()),e.debug("Encrypted event successfully")}}var v=s("./node_modules/matrix-js-sdk/src/base64.ts");const f="/_matrix/client/unstable/org.matrix.msc3814.v1",w="org.matrix.msc3814";class k{constructor(e,t,s,r,n){(0,i.A)(this,"key",void 0),(0,i.A)(this,"intervalId",void 0),this.logger=e,this.olmMachine=t,this.http=s,this.outgoingRequestProcessor=r,this.secretStorage=n}async isSupported(){try{await this.http.authedRequest(g.IT.Get,"/dehydrated_device",void 0,void 0,{prefix:f})}catch(e){const t=e;if("M_UNRECOGNIZED"===t.errcode)return!1;if("M_NOT_FOUND"===t.errcode)return!0;throw e}return!0}async start(e){this.stop();try{await this.rehydrateDeviceIfAvailable()}catch(e){this.logger.info("dehydration: Error rehydrating device:",e)}e&&await this.resetKey(),await this.scheduleDeviceDehydration()}async isKeyStored(){return Boolean(await this.secretStorage.isStored(w))}async resetKey(){const e=new Uint8Array(32);globalThis.crypto.getRandomValues(e),await this.secretStorage.store(w,(0,v.PP)(e)),this.key=e}async getKey(e){if(void 0===this.key){const t=await this.secretStorage.get(w);if(void 0===t){if(!e)return null;await this.resetKey()}else this.key=(0,v.y4)(t)}return this.key}async rehydrateDeviceIfAvailable(){const e=await this.getKey(!1);if(!e)return!1;let t;try{t=await this.http.authedRequest(g.IT.Get,"/dehydrated_device",void 0,void 0,{prefix:f})}catch(e){const t=e;if("M_NOT_FOUND"===t.errcode||"M_UNRECOGNIZED"===t.errcode)return this.logger.info("dehydration: No dehydrated device"),!1;throw t}this.logger.info("dehydration: dehydrated device found");const s=await this.olmMachine.dehydratedDevices().rehydrate(e,new r.DeviceId(t.device_id),JSON.stringify(t.device_data));let i;this.logger.info("dehydration: device rehydrated");let n=0,o=0;const a=(0,y.RR)("/dehydrated_device/$device_id/events",{$device_id:t.device_id});for(;;){const e=await this.http.authedRequest(g.IT.Post,a,void 0,i?{next_batch:i}:{},{prefix:f});if(0===e.events.length)break;n+=e.events.length,i=e.next_batch;o+=(await s.receiveEvents(JSON.stringify(e.events))).length}return this.logger.info(`dehydration: received ${o} room keys from ${n} to-device events`),!0}async createAndUploadDehydratedDevice(){const e=await this.getKey(!0),t=await this.olmMachine.dehydratedDevices().create(),s=await t.keysForUpload("Dehydrated device",e);await this.outgoingRequestProcessor.makeOutgoingRequest(s),this.logger.info("dehydration: uploaded device")}async scheduleDeviceDehydration(){this.stop(),await this.createAndUploadDehydratedDevice(),this.intervalId=setInterval((()=>{this.createAndUploadDehydratedDevice().catch((e=>{this.logger.error("Error creating dehydrated device:",e)}))}),6048e5)}stop(){this.intervalId&&(clearInterval(this.intervalId),this.intervalId=void 0)}}function S(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,i)}return s}class b{constructor(e,t){this.olmMachine=e,this.http=t}async makeOutgoingRequest(e,t){let s;if(e instanceof r.KeysUploadRequest)s=await this.requestWithRetry(g.IT.Post,"/_matrix/client/v3/keys/upload",{},e.body);else if(e instanceof r.KeysQueryRequest)s=await this.requestWithRetry(g.IT.Post,"/_matrix/client/v3/keys/query",{},e.body);else if(e instanceof r.KeysClaimRequest)s=await this.requestWithRetry(g.IT.Post,"/_matrix/client/v3/keys/claim",{},e.body);else if(e instanceof r.SignatureUploadRequest)s=await this.requestWithRetry(g.IT.Post,"/_matrix/client/v3/keys/signatures/upload",{},e.body);else if(e instanceof r.KeysBackupRequest)s=await this.requestWithRetry(g.IT.Put,"/_matrix/client/v3/room_keys/keys",{version:e.version},e.body);else if(e instanceof r.ToDeviceRequest)s=await this.sendToDeviceRequest(e);else if(e instanceof r.RoomMessageRequest){const t=`/_matrix/client/v3/rooms/${encodeURIComponent(e.room_id)}/send/${encodeURIComponent(e.event_type)}/${encodeURIComponent(e.txn_id)}`;s=await this.requestWithRetry(g.IT.Put,t,{},e.body)}else{if(e instanceof r.UploadSigningKeysRequest)return void await this.makeRequestWithUIA(g.IT.Post,"/_matrix/client/v3/keys/device_signing/upload",{},e.body,t);if(e instanceof r.PutDehydratedDeviceRequest){const t=f+"/dehydrated_device";return void await this.rawJsonRequest(g.IT.Put,t,{},e.body)}d.v.warn("Unsupported outgoing message",Object.getPrototypeOf(e)),s=""}if(e.id)try{await(0,y.NQ)(d.v,`Mark Request as sent ${e.type}`,(async()=>{await this.olmMachine.markRequestAsSent(e.id,e.type,s)}))}catch(e){if(!(e instanceof Error)||"Attempt to use a moved value"!==e.message&&"null pointer passed to rust"!==e.message)throw e;d.v.log(`Ignoring error '${e.message}': client is likely shutting down`)}else d.v.trace(`Outgoing request type:${e.type} does not have an ID`)}async sendToDeviceRequest(e){const t=JSON.parse(e.body),s=[];for(const[e,i]of Object.entries(t.messages))for(const[t,r]of Object.entries(i))s.push(`${e}/${t} (msgid ${r[h.wt]})`);d.v.info(`Sending batch of to-device messages. type=${e.event_type} txnid=${e.txn_id}`,s);const i=`/_matrix/client/v3/sendToDevice/${encodeURIComponent(e.event_type)}/`+encodeURIComponent(e.txn_id);return await this.requestWithRetry(g.IT.Put,i,{},e.body)}async makeRequestWithUIA(e,t,s,r,n){if(!n)return await this.requestWithRetry(e,t,s,r);const o=JSON.parse(r),a=await n((async r=>{const n=function(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?S(Object(s),!0).forEach((function(t){(0,i.A)(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):S(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}({},o);null!==r&&(n.auth=r);const a=await this.requestWithRetry(e,t,s,JSON.stringify(n));return JSON.parse(a)}));return JSON.stringify(a)}async requestWithRetry(e,t,s,i){let r=0;for(;;)try{return await this.rawJsonRequest(e,t,s,i)}catch(e){r++;const t=(0,g.fZ)(e,r,!0);if(t<0)throw e;await(0,y.yy)(t)}}async rawJsonRequest(e,t,s,i){return await this.http.authedRequest(e,t,s,i,{json:!1,headers:{"Content-Type":"application/json",Accept:"application/json"},prefix:""})}}class R{constructor(e,t){(0,i.A)(this,"currentClaimPromise",void 0),(0,i.A)(this,"stopped",!1),this.olmMachine=e,this.outgoingRequestProcessor=t,this.currentClaimPromise=Promise.resolve()}stop(){this.stopped=!0}ensureSessionsForUsers(e,t){const s=this.currentClaimPromise.catch((()=>{})).then((()=>this.ensureSessionsForUsersInner(e,t)));return this.currentClaimPromise=s,s}async ensureSessionsForUsersInner(e,t){if(this.stopped)throw new Error("Cannot ensure Olm sessions: shutting down");e.info("Checking for missing Olm sessions");const s=await this.olmMachine.getMissingSessions(t.map((e=>e.clone())));s&&(e.info("Making /keys/claim request"),await this.outgoingRequestProcessor.makeOutgoingRequest(s)),e.info("Olm sessions prepared")}}var I=s("./node_modules/matrix-js-sdk/src/models/device.ts");function E(e,t){const s=new Map;for(const[t,i]of e.keys.entries())s.set(t.toString(),i.toBase64());let i=I.u.Unverified;e.isBlacklisted()?i=I.u.Blocked:e.isVerified()&&(i=I.u.Verified);const n=new Map,o=e.signatures.get(t);if(o){const e=new Map;for(const[t,s]of o.entries())s.isValid()&&s.signature&&e.set(t,s.signature.toBase64());n.set(t.toString(),e)}const a=e.algorithms,c=new Set;return a.forEach((e=>{switch(e){case r.EncryptionAlgorithm.MegolmV1AesSha2:c.add("m.megolm.v1.aes-sha2");break;case r.EncryptionAlgorithm.OlmV1Curve25519AesSha2:default:c.add("m.olm.v1.curve25519-aes-sha2")}})),new I.p({deviceId:e.deviceId.toString(),userId:t.toString(),keys:s,algorithms:Array.from(c),verified:i,signatures:n,displayName:e.displayName,dehydrated:e.isDehydrated})}function M(e){var t;const s=new Map(Object.entries(e.keys)),i=null===(t=e.unsigned)||void 0===t?void 0:t.device_display_name,r=new Map;if(e.signatures)for(const t in e.signatures)r.set(t,new Map(Object.entries(e.signatures[t])));return new I.p({deviceId:e.device_id,userId:e.user_id,keys:s,algorithms:e.algorithms,verified:I.u.Unverified,signatures:r,displayName:i})}var _=s("./node_modules/matrix-js-sdk/src/secret-storage.ts");class C{constructor(e,t,s){this.olmMachine=e,this.outgoingRequestProcessor=t,this.secretStorage=s}async bootstrapCrossSigning(e){if(e.setupNewCrossSigning)return void await this.resetCrossSigning(e.authUploadDeviceSigningKeys);const t=await this.olmMachine.crossSigningStatus(),s=await this.secretStorage.get("m.cross_signing.master"),i=await this.secretStorage.get("m.cross_signing.self_signing"),r=await this.secretStorage.get("m.cross_signing.user_signing"),n=Boolean(s&&i&&r),o=t.hasMaster&&t.hasUserSigning&&t.hasSelfSigning;if(d.v.log("bootstrapCrossSigning: starting",{setupNewCrossSigning:e.setupNewCrossSigning,olmDeviceHasMaster:t.hasMaster,olmDeviceHasUserSigning:t.hasUserSigning,olmDeviceHasSelfSigning:t.hasSelfSigning,privateKeysInSecretStorage:n}),o)await this.secretStorage.hasKey()?n?d.v.log("bootstrapCrossSigning: Olm device has private keys and they are saved in secret storage; doing nothing"):(d.v.log("bootstrapCrossSigning: Olm device has private keys: exporting to secret storage"),await this.exportCrossSigningKeysToStorage()):d.v.warn("bootstrapCrossSigning: Olm device has private keys, but secret storage is not yet set up; doing nothing for now.");else if(n){d.v.log("bootstrapCrossSigning: Cross-signing private keys not found locally, but they are available in secret storage, reading storage and caching locally"),await this.olmMachine.importCrossSigningKeys(s,i,r);const e=await this.olmMachine.getDevice(this.olmMachine.userId,this.olmMachine.deviceId);try{const t=await e.verify();await this.outgoingRequestProcessor.makeOutgoingRequest(t)}finally{e.free()}}else d.v.log("bootstrapCrossSigning: Cross-signing private keys not found locally or in secret storage, creating new keys"),await this.resetCrossSigning(e.authUploadDeviceSigningKeys);d.v.log("bootstrapCrossSigning: complete")}async resetCrossSigning(e){const t=await this.olmMachine.bootstrapCrossSigning(!0);await this.secretStorage.hasKey()?(d.v.log("resetCrossSigning: exporting private keys to secret storage"),await this.exportCrossSigningKeysToStorage()):d.v.warn("resetCrossSigning: Secret storage is not yet set up; not exporting keys to secret storage yet."),d.v.log("resetCrossSigning: publishing public keys to server");for(const s of[t.uploadKeysRequest,t.uploadSigningKeysRequest,t.uploadSignaturesRequest])s&&await this.outgoingRequestProcessor.makeOutgoingRequest(s,e)}async exportCrossSigningKeysToStorage(){const e=await this.olmMachine.exportCrossSigningKeys();null!=e&&e.masterKey?await this.secretStorage.store("m.cross_signing.master",e.masterKey):d.v.error("Cannot export MSK to secret storage, private key unknown"),null!=e&&e.self_signing_key?await this.secretStorage.store("m.cross_signing.self_signing",e.self_signing_key):d.v.error("Cannot export SSK to secret storage, private key unknown"),null!=e&&e.userSigningKey?await this.secretStorage.store("m.cross_signing.user_signing",e.userSigningKey):d.v.error("Cannot export USK to secret storage, private key unknown")}}async function K(e){return D(e,["m.cross_signing.master","m.cross_signing.user_signing","m.cross_signing.self_signing"])}async function D(e,t){const s=await e.getDefaultKeyId();if(!s)return!1;for(const i of t){if(!(s in(await e.isStored(i)||{})))return!1}return!0}var O=s("./node_modules/matrix-js-sdk/src/crypto-api/verification.ts"),B=s("./node_modules/matrix-js-sdk/src/models/typed-event-emitter.ts"),T=s("./node_modules/matrix-js-sdk/src/ReEmitter.ts"),P=s("./node_modules/matrix-js-sdk/src/types.ts"),q=s("./node_modules/buffer/index.js").hp;class A extends B.X{constructor(e,t,s,r){super(),(0,i.A)(this,"reEmitter",void 0),(0,i.A)(this,"_accepting",!1),(0,i.A)(this,"_cancelling",!1),(0,i.A)(this,"_verifier",void 0),this.olmMachine=e,this.inner=t,this.outgoingRequestProcessor=s,this.supportedVerificationMethods=r,this.reEmitter=new T.Q(this);const n=new WeakRef(this);t.registerChangesCallback((async()=>{var e;return null===(e=n.deref())||void 0===e?void 0:e.onChange()}))}onChange(){const e=this.inner.getVerification();e instanceof r.Sas?void 0===this._verifier||this._verifier instanceof V?this.setVerifier(new N(e,this,this.outgoingRequestProcessor)):this._verifier instanceof N&&this._verifier.replaceInner(e):e instanceof r.Qr&&void 0===this._verifier&&this.setVerifier(new V(e,this.outgoingRequestProcessor)),this.emit(O.FM.Change)}setVerifier(e){this._verifier&&this.reEmitter.stopReEmitting(this._verifier,[O.FM.Change]),this._verifier=e,this.reEmitter.reEmit(this._verifier,[O.FM.Change])}get transactionId(){return this.inner.flowId}get roomId(){var e;return null===(e=this.inner.roomId)||void 0===e?void 0:e.toString()}get initiatedByMe(){return this.inner.weStarted()}get otherUserId(){return this.inner.otherUserId.toString()}get otherDeviceId(){var e;return null===(e=this.inner.otherDeviceId)||void 0===e?void 0:e.toString()}async getOtherDevice(){const e=this.inner.otherDeviceId;if(e)return await this.olmMachine.getDevice(this.inner.otherUserId,e,5)}get isSelfVerification(){return this.inner.isSelfVerification()}get phase(){const e=this.inner.phase();switch(e){case r.VerificationRequestPhase.Created:case r.VerificationRequestPhase.Requested:return O.X9.Requested;case r.VerificationRequestPhase.Ready:return this._accepting?O.X9.Requested:O.X9.Ready;case r.VerificationRequestPhase.Transitioned:if(!this._verifier)throw new Error("VerificationRequest: inner phase == Transitioned but no verifier!");return this._verifier.verificationPhase;case r.VerificationRequestPhase.Done:return O.X9.Done;case r.VerificationRequestPhase.Cancelled:return O.X9.Cancelled}throw new Error(`Unknown verification phase ${e}`)}get pending(){if(this.inner.isPassive())return!1;const e=this.phase;return e!==O.X9.Done&&e!==O.X9.Cancelled}get accepting(){return this._accepting}get declining(){return this._cancelling}get timeout(){return this.inner.timeRemainingMillis()}get methods(){throw new Error("not implemented")}get chosenMethod(){if(this.phase!==O.X9.Started)return null;const e=this.inner.getVerification();return e instanceof r.Sas?P.V.Sas:e instanceof r.Qr?P.V.Reciprocate:null}otherPartySupportsMethod(e){const t=this.inner.theirSupportedMethods;if(void 0===t)return!1;const s=x[e];return t.some((e=>e===s))}async accept(){if(this.inner.phase()!==r.VerificationRequestPhase.Requested||this._accepting)throw new Error(`Cannot accept a verification request in phase ${this.phase}`);this._accepting=!0;try{const e=this.inner.acceptWithMethods(this.supportedVerificationMethods.map(j));e&&await this.outgoingRequestProcessor.makeOutgoingRequest(e)}finally{this._accepting=!1}this.emit(O.FM.Change)}async cancel(e){if(!this._cancelling){this._cancelling=!0;try{const e=this.inner.cancel();e&&await this.outgoingRequestProcessor.makeOutgoingRequest(e)}finally{this._cancelling=!1}}}beginKeyVerification(e,t){throw new Error("not implemented")}async startVerification(e){if(e!==P.V.Sas)throw new Error(`Unsupported verification method ${e}`);if(!await this.getOtherDevice())throw new Error("startVerification(): other device is unknown");const t=await this.inner.startSas();if(t){const[,e]=t;await this.outgoingRequestProcessor.makeOutgoingRequest(e)}if(!this._verifier)throw new Error("Still no verifier after startSas() call");return this._verifier}async scanQRCode(e){const t=r.QrCodeScan.fromBytes(new Uint8ClampedArray(e)),s=await this.inner.scanQrCode(t);if(!this._verifier)throw new Error("Still no verifier after scanQrCode() call");const i=s.reciprocate();return i&&await this.outgoingRequestProcessor.makeOutgoingRequest(i),this._verifier}get verifier(){return this.phase===O.X9.Started?this._verifier:void 0}getQRCodeBytes(){throw new Error("getQRCodeBytes() unsupported in Rust Crypto; use generateQRCode() instead.")}async generateQRCode(){if(!await this.getOtherDevice())throw new Error("generateQRCode(): other device is unknown");const e=await this.inner.generateQrCode();if(e)return q.from(e.toBytes())}get cancellationCode(){var e,t;return null!==(e=null===(t=this.inner.cancelInfo)||void 0===t?void 0:t.cancelCode())&&void 0!==e?e:null}get cancellingUserId(){const e=this.inner.cancelInfo;return e?e.cancelledbyUs()?this.olmMachine.userId.toString():this.inner.otherUserId.toString():void 0}}class U extends B.X{constructor(e,t){super(),(0,i.A)(this,"completionDeferred",void 0),this.inner=e,this.outgoingRequestProcessor=t,this.completionDeferred=(0,y.v6)();const s=new WeakRef(this);e.registerChangesCallback((async()=>{var e;return null===(e=s.deref())||void 0===e?void 0:e.onChange()})),this.completionDeferred.promise.catch((()=>null))}onChange(){if(this.inner.isDone())this.completionDeferred.resolve(void 0);else if(this.inner.isCancelled()){const e=this.inner.cancelInfo();this.completionDeferred.reject(new Error(`Verification cancelled by ${e.cancelledbyUs()?"us":"them"} with code ${e.cancelCode()}: ${e.reason()}`))}this.emit(O.FM.Change)}get hasBeenCancelled(){return this.inner.isCancelled()}get userId(){return this.inner.otherUserId.toString()}cancel(e){const t=this.inner.cancel();t&&this.outgoingRequestProcessor.makeOutgoingRequest(t)}getShowSasCallbacks(){return null}getReciprocateQrCodeCallbacks(){return null}}class V extends U{constructor(e,t){super(e,t),(0,i.A)(this,"callbacks",null)}onChange(){null===this.callbacks&&this.inner.hasBeenScanned()&&(this.callbacks={confirm:()=>{this.confirmScanning()},cancel:()=>this.cancel()}),super.onChange()}async verify(){null!==this.callbacks&&this.emit(O.Ji.ShowReciprocateQr,this.callbacks),await this.completionDeferred.promise}get verificationPhase(){switch(this.inner.state()){case r.QrState.Created:return O.X9.Ready;case r.QrState.Scanned:case r.QrState.Confirmed:case r.QrState.Reciprocated:return O.X9.Started;case r.QrState.Done:return O.X9.Done;case r.QrState.Cancelled:return O.X9.Cancelled;default:throw new Error(`Unknown qr code state ${this.inner.state()}`)}}getReciprocateQrCodeCallbacks(){return this.callbacks}async confirmScanning(){const e=this.inner.confirmScanning();e&&await this.outgoingRequestProcessor.makeOutgoingRequest(e)}}class N extends U{constructor(e,t,s){super(e,s),(0,i.A)(this,"callbacks",null)}async verify(){await this.sendAccept(),await this.completionDeferred.promise}async sendAccept(){const e=this.inner.accept();e&&await this.outgoingRequestProcessor.makeOutgoingRequest(e)}onChange(){if(super.onChange(),null===this.callbacks){const e=this.inner.emoji(),t=this.inner.decimals();if(void 0===e&&void 0===t)return;const s={};e&&(s.emoji=e.map((e=>[e.symbol,e.description]))),t&&(s.decimal=[t[0],t[1],t[2]]),this.callbacks={sas:s,confirm:async()=>{const e=await this.inner.confirm();for(const t of e)await this.outgoingRequestProcessor.makeOutgoingRequest(t)},mismatch:()=>{const e=this.inner.cancelWithCode("m.mismatched_sas");e&&this.outgoingRequestProcessor.makeOutgoingRequest(e)},cancel:()=>{const e=this.inner.cancelWithCode("m.user");e&&this.outgoingRequestProcessor.makeOutgoingRequest(e)}},this.emit(O.Ji.ShowSas,this.callbacks)}}get verificationPhase(){return O.X9.Started}getShowSasCallbacks(){return this.callbacks}replaceInner(e){if(this.inner!=e){this.inner=e;const t=new WeakRef(this);e.registerChangesCallback((async()=>{var e;return null===(e=t.deref())||void 0===e?void 0:e.onChange()})),this.sendAccept(),this.onChange()}}}const x={[P.V.Sas]:r.VerificationMethod.SasV1,[P.V.ScanQrCode]:r.VerificationMethod.QrCodeScanV1,[P.V.ShowQrCode]:r.VerificationMethod.QrCodeShowV1,[P.V.Reciprocate]:r.VerificationMethod.ReciprocateV1};function j(e){const t=x[e];if(void 0===t)throw new Error(`Unknown verification method ${e}`);return t}var $=s("./node_modules/matrix-js-sdk/src/crypto/index.ts");class L extends B.X{constructor(e,t,s){super(),(0,i.A)(this,"checkedForBackup",!1),(0,i.A)(this,"serverBackupInfo",void 0),(0,i.A)(this,"activeBackupVersion",null),(0,i.A)(this,"stopped",!1),(0,i.A)(this,"backupKeysLoopRunning",!1),(0,i.A)(this,"keyBackupCheckInProgress",null),this.olmMachine=e,this.http=t,this.outgoingRequestProcessor=s}stop(){this.stopped=!0}async getActiveBackupVersion(){return await this.olmMachine.isBackupEnabled()?this.activeBackupVersion:null}async getServerBackupInfo(){return await this.checkKeyBackupAndEnable(!1),this.serverBackupInfo}async isKeyBackupTrusted(e){const t=await this.olmMachine.verifyBackup(e),s=await this.olmMachine.getBackupKeys(),i=null==s?void 0:s.decryptionKey;return{matchesDecryptionKey:!!i&&F(e,i),trusted:t.trusted()}}checkKeyBackupAndEnable(e){return!e&&this.checkedForBackup?Promise.resolve(null):(this.keyBackupCheckInProgress||(this.keyBackupCheckInProgress=this.doCheckKeyBackup().finally((()=>{this.keyBackupCheckInProgress=null}))),this.keyBackupCheckInProgress)}async handleBackupSecretReceived(e){var t;const s=await this.checkKeyBackupAndEnable(!0);if(null==s||null===(t=s.backupInfo)||void 0===t||!t.version||!s.trustInfo.trusted)return d.v.warn("handleBackupSecretReceived: Received a backup decryption key, but there is no trusted server-side key backup"),!1;try{const t=r.BackupDecryptionKey.fromBase64(e);return F(s.backupInfo,t)?(d.v.info("handleBackupSecretReceived: A valid backup decryption key has been received and stored in cache."),await this.saveBackupDecryptionKey(t,s.backupInfo.version),!0):(d.v.warn("handleBackupSecretReceived: Private decryption key does not match the public key of the current remote backup."),!1)}catch(e){d.v.warn("handleBackupSecretReceived: Invalid backup decryption key",e)}return!1}async saveBackupDecryptionKey(e,t){await this.olmMachine.saveBackupDecryptionKey(e,t),this.emit($.cr.KeyBackupDecryptionKeyCached,t)}async importRoomKeys(e,t){await this.importRoomKeysAsJson(JSON.stringify(e),t)}async importRoomKeysAsJson(e,t){await this.olmMachine.importExportedRoomKeys(e,((e,s)=>{var i;const r={total:Number(s),successes:Number(e),stage:"load_keys",failures:0};null==t||null===(i=t.progressCallback)||void 0===i||i.call(t,r)}))}async importBackedUpRoomKeys(e,t,s){const i=new Map;for(const t of e){const e=new r.RoomId(t.room_id);i.has(e)||i.set(e,new Map),i.get(e).set(t.session_id,t)}await this.olmMachine.importBackedUpRoomKeys(i,((e,t,i)=>{var r;const n={total:Number(t),successes:Number(e),stage:"load_keys",failures:Number(i)};null==s||null===(r=s.progressCallback)||void 0===r||r.call(s,n)}),t)}async doCheckKeyBackup(){let e;d.v.log("Checking key backup status...");try{e=await this.requestKeyBackupVersion()}catch(e){return d.v.warn("Error checking for active key backup",e),this.serverBackupInfo=void 0,null}this.checkedForBackup=!0,e&&!e.version&&(d.v.warn("active backup lacks a useful 'version'; ignoring it"),e=void 0),this.serverBackupInfo=e;const t=await this.getActiveBackupVersion();if(!e)return null!==t?(d.v.log("No key backup present on server: disabling key backup"),await this.disableKeyBackup()):d.v.log("No key backup present on server: not enabling key backup"),null;const s=await this.isKeyBackupTrusted(e);return s.trusted?null===t?(d.v.log(`Found usable key backup v${e.version}: enabling key backups`),await this.enableKeyBackup(e)):t!==e.version?(d.v.log(`On backup version ${t} but found version ${e.version}: switching.`),await this.disableKeyBackup(),await this.enableKeyBackup(e)):d.v.log(`Backup version ${e.version} still current`):null!==t?(d.v.log("Key backup present on server but not trusted: disabling key backup"),await this.disableKeyBackup()):d.v.log("Key backup present on server but not trusted: not enabling key backup"),{backupInfo:e,trustInfo:s}}async enableKeyBackup(e){await this.olmMachine.enableBackupV1(e.auth_data.public_key,e.version),this.activeBackupVersion=e.version,this.emit($.cr.KeyBackupStatus,!0),this.backupKeysLoop()}async maybeUploadKey(){null!=this.activeBackupVersion&&this.backupKeysLoop()}async disableKeyBackup(){await this.olmMachine.disableBackup(),this.activeBackupVersion=null,this.emit($.cr.KeyBackupStatus,!1)}async backupKeysLoop(e=1e4){if(this.backupKeysLoopRunning)return void d.v.log("Backup loop already running");this.backupKeysLoopRunning=!0,d.v.log(`Backup: Starting keys upload loop for backup version:${this.activeBackupVersion}.`);const t=Math.random()*e;await(0,y.yy)(t);try{let e=0,t=null,s=!0;for(;!this.stopped;){let i=null;try{i=await(0,y.NQ)(d.v,"BackupRoomKeys: Get keys to backup from rust crypto-sdk",(async()=>await this.olmMachine.backupRoomKeys()))}catch(e){d.v.error("Backup: Failed to get keys to backup from rust crypto-sdk",e)}if(!i||this.stopped||!this.activeBackupVersion)return d.v.log(`Backup: Ending loop for version ${this.activeBackupVersion}.`),void(i||this.emit($.cr.KeyBackupSessionsRemaining,0));try{if(await this.outgoingRequestProcessor.makeOutgoingRequest(i),e=0,this.stopped)break;if(!s&&null===t)try{const e=await this.olmMachine.roomKeyCounts();t=e.total-e.backedUp}catch(e){d.v.error("Backup: Failed to get key counts from rust crypto-sdk",e)}if(null!==t){this.emit($.cr.KeyBackupSessionsRemaining,t);const e=this.keysCountInBatch(i);t=Math.max(t-e,0)}}catch(t){if(e++,d.v.error("Backup: Error processing backup request for rust crypto-sdk",t),t instanceof g.up){const e=t.data.errcode;if("M_NOT_FOUND"==e||"M_WRONG_ROOM_KEYS_VERSION"==e){d.v.log(`Backup: Failed to upload keys to current vesion: ${e}.`);try{await this.disableKeyBackup()}catch(e){d.v.error("Backup: An error occurred while disabling key backup:",e)}return this.emit($.cr.KeyBackupFailed,t.data.errcode),this.backupKeysLoopRunning=!1,void this.checkKeyBackupAndEnable(!0)}if("M_LIMIT_EXCEEDED"==e){const e=t.data.retry_after_ms;if(e>0){await(0,y.yy)(e);continue}}}await(0,y.yy)(1e3*Math.pow(2,Math.min(e-1,4)))}s=!1}}finally{this.backupKeysLoopRunning=!1}}keysCountInBatch(e){const t=JSON.parse(e.body);let s=0;for(const{sessions:e}of Object.values(t.rooms))s+=Object.keys(e).length;return s}async requestKeyBackupVersion(){return await W(this.http)}async setupKeyBackup(e){await this.deleteAllKeyBackupVersions();const t=r.BackupDecryptionKey.createRandomKey(),s=t.megolmV1PublicKey,i={public_key:s.publicKeyBase64};await e(i);const n=await this.http.authedRequest(g.IT.Post,"/room_keys/version",void 0,{algorithm:s.algorithm,auth_data:i},{prefix:g.iD.V3});return await this.saveBackupDecryptionKey(t,n.version),{version:n.version,algorithm:s.algorithm,authData:i,decryptionKey:t}}async deleteAllKeyBackupVersions(){var e,t;let s=null!==(e=null===(t=await this.requestKeyBackupVersion())||void 0===t?void 0:t.version)&&void 0!==e?e:null;for(;null!=s;){var i,r;await this.deleteKeyBackupVersion(s),s=null!==(i=null===(r=await this.requestKeyBackupVersion())||void 0===r?void 0:r.version)&&void 0!==i?i:null}}async deleteKeyBackupVersion(e){d.v.debug(`deleteKeyBackupVersion v:${e}`);const t=(0,y.RR)("/room_keys/version/$version",{$version:e});await this.http.authedRequest(g.IT.Delete,t,void 0,void 0,{prefix:g.iD.V3})}createBackupDecryptor(e){return new G(e)}}function F(e,t){var s;return"m.megolm_backup.v1.curve25519-aes-sha2"!==e.algorithm?(d.v.warn("backupMatchesPrivateKey: Unsupported backup algorithm",e.algorithm),!1):(null===(s=e.auth_data)||void 0===s?void 0:s.public_key)===t.megolmV1PublicKey.publicKeyBase64}class G{constructor(e){(0,i.A)(this,"decryptionKey",void 0),(0,i.A)(this,"sourceTrusted",void 0),this.decryptionKey=e,this.sourceTrusted=!1}async decryptSessions(e){const t=[];for(const[s,i]of Object.entries(e))try{const e=JSON.parse(this.decryptionKey.decryptV1(i.session_data.ephemeral,i.session_data.mac,i.session_data.ciphertext));e.session_id=s,t.push(e)}catch(e){d.v.log("Failed to decrypt megolm session from backup",e,i)}return t}free(){this.decryptionKey.free()}}async function W(e){try{return await e.authedRequest(g.IT.Get,"/room_keys/version",void 0,void 0,{prefix:g.iD.V3})}catch(e){if("M_NOT_FOUND"===e.errcode)return null;throw e}}var Q=s("./node_modules/matrix-js-sdk/src/randomstring.ts"),J=s("./node_modules/matrix-js-sdk/src/errors.ts");class H{constructor(e,t,s){(0,i.A)(this,"stopped",!1),(0,i.A)(this,"outgoingRequestLoopRunning",!1),(0,i.A)(this,"nextLoopDeferred",void 0),this.logger=e,this.olmMachine=t,this.outgoingRequestProcessor=s}stop(){this.stopped=!0}doProcessOutgoingRequests(){this.nextLoopDeferred||(this.nextLoopDeferred=(0,y.v6)());const e=this.nextLoopDeferred.promise;return this.outgoingRequestLoopRunning||this.outgoingRequestLoop().catch((e=>{this.logger.error("Uncaught error in outgoing request loop",e)})),e}async outgoingRequestLoop(){if(this.outgoingRequestLoopRunning)throw new Error("Cannot run two outgoing request loops");this.outgoingRequestLoopRunning=!0;try{for(;!this.stopped&&this.nextLoopDeferred;){const e=this.nextLoopDeferred;this.nextLoopDeferred=void 0,await this.processOutgoingRequests().then(e.resolve,e.reject)}}finally{this.outgoingRequestLoopRunning=!1}this.nextLoopDeferred&&this.nextLoopDeferred.reject(new Error("OutgoingRequestsManager was stopped"))}async processOutgoingRequests(){if(this.stopped)return;const e=await this.olmMachine.outgoingRequests();for(const t of e){if(this.stopped)return;try{await(0,y.NQ)(this.logger,`Make outgoing request ${t.type}`,(async()=>{await this.outgoingRequestProcessor.makeOutgoingRequest(t)}))}catch(e){this.logger.error(`Failed to process outgoing request ${t.type}: ${e}`)}}}}var Y=s("./node_modules/matrix-js-sdk/src/matrix.ts");const X=5e3;var z=function(e){return e.MISSING_DECRYPTION_KEY="MISSING_DECRYPTION_KEY",e.NETWORK_ERROR="NETWORK_ERROR",e.STOPPED="STOPPED",e}(z||{});class Z extends Error{constructor(e){super(`Failed to get key from backup: ${e}`),this.code=e,this.name="KeyDownloadError"}}class ee extends Error{constructor(e){super("Failed to get key from backup: rate limited"),this.retryMillis=e,this.name="KeyDownloadRateLimitError"}}class te{constructor(e,t,s,r){(0,i.A)(this,"stopped",!1),(0,i.A)(this,"configuration",null),(0,i.A)(this,"sessionLastCheckAttemptedTime",new Map),(0,i.A)(this,"logger",void 0),(0,i.A)(this,"downloadLoopRunning",!1),(0,i.A)(this,"queuedRequests",[]),(0,i.A)(this,"hasConfigurationProblem",!1),(0,i.A)(this,"currentBackupVersionCheck",null),(0,i.A)(this,"onBackupStatusChanged",(()=>{this.hasConfigurationProblem=!1,this.configuration=null,this.getOrCreateBackupConfiguration().then((e=>{e&&this.downloadKeysLoop()}))})),this.olmMachine=t,this.http=s,this.backupManager=r,this.logger=e.getChild("[PerSessionKeyBackupDownloader]"),r.on(Y.CryptoEvent.KeyBackupStatus,this.onBackupStatusChanged),r.on(Y.CryptoEvent.KeyBackupFailed,this.onBackupStatusChanged),r.on(Y.CryptoEvent.KeyBackupDecryptionKeyCached,this.onBackupStatusChanged)}isKeyBackupDownloadConfigured(){return null!==this.configuration}async getServerBackupInfo(){return await this.backupManager.getServerBackupInfo()}onDecryptionKeyMissingError(e,t){this.isAlreadyInQueue(e,t)?this.logger.trace(`Not checking key backup for session ${t} as it is already queued`):this.wasRequestedRecently(t)?this.logger.trace(`Not checking key backup for session ${t} as it was already requested recently`):(this.queuedRequests.push({roomId:e,megolmSessionId:t}),this.downloadKeysLoop())}stop(){this.stopped=!0,this.backupManager.off(Y.CryptoEvent.KeyBackupStatus,this.onBackupStatusChanged),this.backupManager.off(Y.CryptoEvent.KeyBackupFailed,this.onBackupStatusChanged),this.backupManager.off(Y.CryptoEvent.KeyBackupDecryptionKeyCached,this.onBackupStatusChanged)}isAlreadyInQueue(e,t){return this.queuedRequests.some((s=>s.roomId==e&&s.megolmSessionId==t))}markAsNotFoundInBackup(e){const t=Date.now();this.sessionLastCheckAttemptedTime.set(e,t),this.sessionLastCheckAttemptedTime.size>100&&(this.sessionLastCheckAttemptedTime=new Map(Array.from(this.sessionLastCheckAttemptedTime).filter(((e,s)=>Math.max(t-s,0)<X))))}wasRequestedRecently(e){const t=this.sessionLastCheckAttemptedTime.get(e);return!!t&&Math.max(Date.now()-t,0)<X}async getBackupDecryptionKey(){try{return await this.olmMachine.getBackupKeys()}catch(e){return null}}async requestRoomKeyFromBackup(e,t,s){const i=(0,y.RR)("/room_keys/keys/$roomId/$sessionId",{$roomId:t,$sessionId:s});return await this.http.authedRequest(g.IT.Get,i,{version:e},void 0,{prefix:g.iD.V3})}async downloadKeysLoop(){if(!this.downloadLoopRunning&&!this.hasConfigurationProblem){this.downloadLoopRunning=!0;try{for(;this.queuedRequests.length>0;){const e=this.queuedRequests[0];try{const t=await this.getOrCreateBackupConfiguration();if(!t)return void(this.downloadLoopRunning=!1);const s=await this.queryKeyBackup(e.roomId,e.megolmSessionId,t);if(this.stopped)return;try{await this.decryptAndImport(e,s,t)}catch(t){this.logger.error(`Error while decrypting and importing key backup for session ${e.megolmSessionId}`,t)}this.queuedRequests.shift()}catch(t){if(t instanceof Z)switch(t.code){case z.MISSING_DECRYPTION_KEY:this.markAsNotFoundInBackup(e.megolmSessionId),this.queuedRequests.shift();break;case z.NETWORK_ERROR:await(0,y.yy)(X);break;case z.STOPPED:return void(this.downloadLoopRunning=!1)}else t instanceof ee&&await(0,y.yy)(t.retryMillis)}}}finally{this.downloadLoopRunning=!1}}}async queryKeyBackup(e,t,s){if(this.logger.debug(`Checking key backup for session ${t}`),this.stopped)throw new Z(z.STOPPED);try{const i=await this.requestRoomKeyFromBackup(s.backupVersion,e,t);return this.logger.debug(`Got key from backup for sessionId:${t}`),i}catch(e){if(this.stopped)throw new Z(z.STOPPED);if(this.logger.info(`No luck requesting key backup for session ${t}: ${e}`),e instanceof g.up){const t=e.data.errcode;if("M_NOT_FOUND"==t)throw new Z(z.MISSING_DECRYPTION_KEY);if("M_LIMIT_EXCEEDED"==t){const t=e.data.retry_after_ms;throw t>0?(this.logger.info(`Rate limited by server, waiting ${t}ms`),new ee(t)):new ee(X)}}throw new Z(z.NETWORK_ERROR)}}async decryptAndImport(e,t,s){const i={[e.megolmSessionId]:t},r=await s.decryptor.decryptSessions(i);for(const t of r)t.room_id=e.roomId;await this.backupManager.importBackedUpRoomKeys(r,s.backupVersion)}async getOrCreateBackupConfiguration(){if(this.configuration)return this.configuration;if(this.hasConfigurationProblem)return null;if(null!=this.currentBackupVersionCheck)return this.logger.debug("Already checking server version, use current promise"),await this.currentBackupVersionCheck;this.currentBackupVersionCheck=this.internalCheckFromServer();try{return await this.currentBackupVersionCheck}finally{this.currentBackupVersionCheck=null}}async internalCheckFromServer(){var e,t,s;let i=null;try{i=await this.backupManager.getServerBackupInfo()}catch(e){return this.logger.debug(`Backup: error while checking server version: ${e}`),this.hasConfigurationProblem=!0,null}var r;if(this.logger.debug(`Got current backup version from server: ${null===(e=i)||void 0===e?void 0:e.version}`),"m.megolm_backup.v1.curve25519-aes-sha2"!=(null===(t=i)||void 0===t?void 0:t.algorithm))return this.logger.info(`Unsupported algorithm ${null===(r=i)||void 0===r?void 0:r.algorithm}`),this.hasConfigurationProblem=!0,null;if(null===(s=i)||void 0===s||!s.version)return this.logger.info("No current key backup"),this.hasConfigurationProblem=!0,null;const n=await this.backupManager.getActiveBackupVersion();if(null==n||i.version!=n)return this.logger.info(`The current backup version on the server (${i.version}) is not trusted. Version we are currently backing up to: ${n}`),this.hasConfigurationProblem=!0,null;const o=await this.getBackupDecryptionKey();if(null==o||!o.decryptionKey)return this.logger.debug("Not checking key backup for session (no decryption key)"),this.hasConfigurationProblem=!0,null;if(n!=o.backupVersion)return this.logger.debug(`Version for which we have a decryption key (${o.backupVersion}) doesn't match the version we are backing up to (${n})`),this.hasConfigurationProblem=!0,null;if(i.auth_data.public_key!=o.decryptionKey.megolmV1PublicKey.publicKeyBase64)return this.logger.debug("Key backup on server does not match our decryption key"),this.hasConfigurationProblem=!0,null;const a=this.backupManager.createBackupDecryptor(o.decryptionKey);return this.hasConfigurationProblem=!1,this.configuration={decryptor:a,backupVersion:n},this.configuration}}var se=s("./node_modules/buffer/index.js").hp;function ie(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,i)}return s}function re(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?ie(Object(s),!0).forEach((function(t){(0,i.A)(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):ie(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}const ne=[P.V.Sas,P.V.ScanQrCode,P.V.ShowQrCode,P.V.Reciprocate];class oe extends B.X{constructor(e,t,s,r,n,o,a){super(),(0,i.A)(this,"RECOVERY_KEY_DERIVATION_ITERATIONS",5e5),(0,i.A)(this,"_trustCrossSignedDevices",!0),(0,i.A)(this,"deviceIsolationMode",new p.AllDevicesIsolationMode(!1)),(0,i.A)(this,"stopped",!1),(0,i.A)(this,"roomEncryptors",{}),(0,i.A)(this,"eventDecryptor",void 0),(0,i.A)(this,"keyClaimManager",void 0),(0,i.A)(this,"outgoingRequestProcessor",void 0),(0,i.A)(this,"crossSigningIdentity",void 0),(0,i.A)(this,"backupManager",void 0),(0,i.A)(this,"outgoingRequestsManager",void 0),(0,i.A)(this,"perSessionBackupDownloader",void 0),(0,i.A)(this,"dehydratedDeviceManager",void 0),(0,i.A)(this,"reemitter",new T.Q(this)),(0,i.A)(this,"globalBlacklistUnverifiedDevices",!1),(0,i.A)(this,"_supportedVerificationMethods",ne),this.logger=e,this.olmMachine=t,this.http=s,this.userId=r,this.secretStorage=o,this.cryptoCallbacks=a,this.outgoingRequestProcessor=new b(t,s),this.outgoingRequestsManager=new H(this.logger,t,this.outgoingRequestProcessor),this.keyClaimManager=new R(t,this.outgoingRequestProcessor),this.backupManager=new L(t,s,this.outgoingRequestProcessor),this.perSessionBackupDownloader=new te(this.logger,this.olmMachine,this.http,this.backupManager),this.dehydratedDeviceManager=new k(this.logger,t,s,this.outgoingRequestProcessor,o),this.eventDecryptor=new ae(this.logger,t,this.perSessionBackupDownloader),this.reemitter.reEmit(this.backupManager,[$.cr.KeyBackupStatus,$.cr.KeyBackupSessionsRemaining,$.cr.KeyBackupFailed,$.cr.KeyBackupDecryptionKeyCached]),this.crossSigningIdentity=new C(t,this.outgoingRequestProcessor,o),this.checkKeyBackupAndEnable()}getOlmMachineOrThrow(){if(this.stopped)throw new J.LA;return this.olmMachine}set globalErrorOnUnknownDevices(e){}get globalErrorOnUnknownDevices(){return!1}stop(){this.stopped||(this.stopped=!0,this.keyClaimManager.stop(),this.backupManager.stop(),this.outgoingRequestsManager.stop(),this.perSessionBackupDownloader.stop(),this.dehydratedDeviceManager.stop(),this.olmMachine.close())}async encryptEvent(e,t){const s=e.getRoomId(),i=this.roomEncryptors[s];if(!i)throw new Error(`Cannot encrypt event in unconfigured room ${s}`);await i.encryptEvent(e,this.globalBlacklistUnverifiedDevices,this.deviceIsolationMode)}async decryptEvent(e){if(!e.getRoomId())throw new Error("to-device event was not decrypted in preprocessToDeviceMessages");return await this.eventDecryptor.attemptEventDecryption(e,this.deviceIsolationMode)}getEventEncryptionInfo(e){var t;const s={};return s.senderKey=null!==(t=e.getSenderKey())&&void 0!==t?t:void 0,s.algorithm=e.getWireContent().algorithm,s.senderKey&&s.algorithm?(s.encrypted=!0,s.authenticated=!0,s.mismatchedSender=!0,s):(s.encrypted=!1,s)}checkUserTrust(e){return new p.UserVerificationStatus(!1,!1,!1)}getStoredCrossSigningForUser(e){return null}async checkOwnCrossSigningTrust(){}async getBackupDecryptor(e,t){if(!(t instanceof Uint8Array))throw new Error("getBackupDecryptor: expects Uint8Array");if("m.megolm_backup.v1.curve25519-aes-sha2"!=e.algorithm)throw new Error(`getBackupDecryptor: Unsupported algorithm ${e.algorithm}`);const s=r.BackupDecryptionKey.fromBase64((0,v.WG)(t));if(e.auth_data.public_key!=s.megolmV1PublicKey.publicKeyBase64)throw new Error("getBackupDecryptor: key backup on server does not match the decryption key");return this.backupManager.createBackupDecryptor(s)}async importBackedUpRoomKeys(e,t,s){return await this.backupManager.importBackedUpRoomKeys(e,t,s)}getVersion(){const e=r.getVersions();return`Rust SDK ${e.matrix_sdk_crypto} (${e.git_sha}), Vodozemac ${e.vodozemac}`}setDeviceIsolationMode(e){this.deviceIsolationMode=e}async isEncryptionEnabledInRoom(e){const t=await this.olmMachine.getRoomSettings(new r.RoomId(e));return Boolean(null==t?void 0:t.algorithm)}async getOwnDeviceKeys(){const e=this.olmMachine.identityKeys;return{ed25519:e.ed25519.toBase64(),curve25519:e.curve25519.toBase64()}}prepareToEncrypt(e){const t=this.roomEncryptors[e.roomId];t&&t.prepareForEncryption(this.globalBlacklistUnverifiedDevices,this.deviceIsolationMode)}forceDiscardSession(e){var t;return null===(t=this.roomEncryptors[e])||void 0===t?void 0:t.forceDiscardSession()}async exportRoomKeys(){const e=await this.olmMachine.exportRoomKeys((()=>!0));return JSON.parse(e)}async exportRoomKeysAsJson(){return await this.olmMachine.exportRoomKeys((()=>!0))}async importRoomKeys(e,t){return await this.backupManager.importRoomKeys(e,t)}async importRoomKeysAsJson(e,t){return await this.backupManager.importRoomKeysAsJson(e,t)}async userHasCrossSigningKeys(e=this.userId,t=!1){const s=await this.olmMachine.trackedUsers();let i;for(const t of s)if(e===t.toString()){i=t;break}if(void 0!==i){if(e===this.userId){const e=this.olmMachine.queryKeysForUsers([i.clone()]);await this.outgoingRequestProcessor.makeOutgoingRequest(e)}const t=await this.olmMachine.getIdentity(i);return null==t||t.free(),void 0!==t}if(t){var r;const t=null===(r=(await this.downloadDeviceList(new Set([e]))).master_keys)||void 0===r?void 0:r[e];return!!t&&Boolean(Object.values(t.keys)[0])}return!1}async getUserDeviceInfo(e,t=!1){const s=new Map,i=await this.getOlmMachineOrThrow().trackedUsers(),r=new Set;i.forEach((e=>r.add(e.toString())));const n=new Set;for(const t of e)r.has(t)?s.set(t,await this.getUserDevices(t)):n.add(t);if(t&&n.size>=1){const e=await this.downloadDeviceList(n);Object.entries(e.device_keys).forEach((([e,t])=>s.set(e,function(e){return new Map(Object.entries(e).map((([e,t])=>[e,M(t)])))}(t))))}return s}async getUserDevices(e){const t=new r.UserId(e),s=await this.olmMachine.getUserDevices(t,1);try{const e=s.devices();try{return new Map(e.map((e=>[e.deviceId.toString(),E(e,t)])))}finally{e.forEach((e=>e.free()))}}finally{s.free()}}async downloadDeviceList(e){const t={device_keys:{}};return e.forEach((e=>t.device_keys[e]=[])),await this.http.authedRequest(g.IT.Post,"/_matrix/client/v3/keys/query",void 0,t,{prefix:""})}getTrustCrossSignedDevices(){return this._trustCrossSignedDevices}setTrustCrossSignedDevices(e){this._trustCrossSignedDevices=e}async setDeviceVerified(e,t,s=!0){const i=await this.olmMachine.getDevice(new r.UserId(e),new r.DeviceId(t));if(!i)throw new Error(`Unknown device ${e}|${t}`);try{await i.setLocalTrust(s?r.LocalTrust.Verified:r.LocalTrust.Unset)}finally{i.free()}}async crossSignDevice(e){const t=await this.olmMachine.getDevice(new r.UserId(this.userId),new r.DeviceId(e));if(!t)throw new Error(`Unknown device ${e}`);try{const e=await t.verify();await this.outgoingRequestProcessor.makeOutgoingRequest(e)}finally{t.free()}}async getDeviceVerificationStatus(e,t){const s=await this.olmMachine.getDevice(new r.UserId(e),new r.DeviceId(t));if(!s)return null;try{return new p.DeviceVerificationStatus({signedByOwner:s.isCrossSignedByOwner(),crossSigningVerified:s.isCrossSigningTrusted(),localVerified:s.isLocallyTrusted(),trustCrossSignedDevices:this._trustCrossSignedDevices})}finally{s.free()}}async getUserVerificationStatus(e){const t=await this.getOlmMachineOrThrow().getIdentity(new r.UserId(e));if(void 0===t)return new p.UserVerificationStatus(!1,!1,!1);const s=t.isVerified(),i=t.wasPreviouslyVerified(),n=t instanceof r.UserIdentity&&t.identityNeedsUserApproval();return t.free(),new p.UserVerificationStatus(s,i,!1,n)}async pinCurrentUserIdentity(e){const t=await this.getOlmMachineOrThrow().getIdentity(new r.UserId(e));if(void 0===t)throw new Error("Cannot pin identity of unknown user");if(t instanceof r.OwnUserIdentity)throw new Error("Cannot pin identity of own user");await t.pinCurrentMasterKey()}async isCrossSigningReady(){const{privateKeysInSecretStorage:e,privateKeysCachedLocally:t}=await this.getCrossSigningStatus(),s=Boolean(t.masterKey)&&Boolean(t.selfSigningKey)&&Boolean(t.userSigningKey),i=await this.getOwnIdentity();return!(null==i||!i.isVerified())&&(s||e)}async getCrossSigningKeyId(e=p.CrossSigningKey.Master){const t=await this.olmMachine.getIdentity(new r.UserId(this.userId));if(!t)return null;try{const s=await this.olmMachine.crossSigningStatus();if(!(s.hasMaster&&s.hasUserSigning&&s.hasSelfSigning))return null;if(!t.isVerified())return null;let i;switch(e){case p.CrossSigningKey.Master:i=t.masterKey;break;case p.CrossSigningKey.SelfSigning:i=t.selfSigningKey;break;case p.CrossSigningKey.UserSigning:i=t.userSigningKey;break;default:return null}const r=JSON.parse(i);return Object.values(r.keys)[0]}finally{t.free()}}async bootstrapCrossSigning(e){await this.crossSigningIdentity.bootstrapCrossSigning(e)}async isSecretStorageReady(){const e=["m.cross_signing.master","m.cross_signing.user_signing","m.cross_signing.self_signing"];return null!=await this.backupManager.getActiveBackupVersion()&&e.push("m.megolm_backup.v1"),D(this.secretStorage,e)}async bootstrapSecretStorage({createSecretStorageKey:e,setupNewSecretStorage:t,setupNewKeyBackup:s}={}){const i=t||!await this.secretStorageHasAESKey();if(i){if(!e)throw new Error("unable to create a new secret storage key, createSecretStorageKey is not set");this.logger.info("bootstrapSecretStorage: creating new secret storage key");const t=await e();if(!t)throw new Error("createSecretStorageKey() callback did not return a secret storage key");await this.addSecretStorageKeyToSecretStorage(t)}const r=await this.olmMachine.crossSigningStatus();if(r.hasMaster&&r.hasSelfSigning&&r.hasUserSigning&&(i||!await K(this.secretStorage))){this.logger.info("bootstrapSecretStorage: cross-signing keys not yet exported; doing so now.");const e=await this.olmMachine.exportCrossSigningKeys();if(!e.masterKey)throw new Error("missing master key in cross signing private keys");if(!e.userSigningKey)throw new Error("missing user signing key in cross signing private keys");if(!e.self_signing_key)throw new Error("missing self signing key in cross signing private keys");await this.secretStorage.store("m.cross_signing.master",e.masterKey),await this.secretStorage.store("m.cross_signing.user_signing",e.userSigningKey),await this.secretStorage.store("m.cross_signing.self_signing",e.self_signing_key)}s&&await this.resetKeyBackup()}async addSecretStorageKeyToSecretStorage(e){var t,s,i,r;const n=await this.secretStorage.addKey(_.SECRET_STORAGE_ALGORITHM_V1_AES,{passphrase:null===(t=e.keyInfo)||void 0===t?void 0:t.passphrase,name:null===(s=e.keyInfo)||void 0===s?void 0:s.name,key:e.privateKey});await this.secretStorage.setDefaultKeyId(n.keyId),null===(i=(r=this.cryptoCallbacks).cacheSecretStorageKey)||void 0===i||i.call(r,n.keyId,n.keyInfo,e.privateKey)}async secretStorageHasAESKey(){const e=await this.secretStorage.getKey();if(!e)return!1;const[,t]=e;return t.algorithm===_.SECRET_STORAGE_ALGORITHM_V1_AES}async getCrossSigningStatus(){const e=await this.getOlmMachineOrThrow().getIdentity(new r.UserId(this.userId)),t=Boolean(null==e?void 0:e.masterKey)&&Boolean(null==e?void 0:e.selfSigningKey)&&Boolean(null==e?void 0:e.userSigningKey);null==e||e.free();const s=await K(this.secretStorage),i=await this.getOlmMachineOrThrow().crossSigningStatus();return{publicKeysOnDevice:t,privateKeysInSecretStorage:s,privateKeysCachedLocally:{masterKey:Boolean(null==i?void 0:i.hasMaster),userSigningKey:Boolean(null==i?void 0:i.hasUserSigning),selfSigningKey:Boolean(null==i?void 0:i.hasSelfSigning)}}}async createRecoveryKeyFromPassphrase(e){if(e){const t=(0,Q.DU)(32),s=await(0,p.deriveRecoveryKeyFromPassphrase)(e,t,this.RECOVERY_KEY_DERIVATION_ITERATIONS);return{keyInfo:{passphrase:{algorithm:"m.pbkdf2",iterations:this.RECOVERY_KEY_DERIVATION_ITERATIONS,salt:t}},privateKey:s,encodedPrivateKey:(0,p.encodeRecoveryKey)(s)}}{const e=new Uint8Array(32);return globalThis.crypto.getRandomValues(e),{privateKey:e,encodedPrivateKey:(0,p.encodeRecoveryKey)(e)}}}async getEncryptionInfoForEvent(e){return this.eventDecryptor.getEncryptionInfoForEvent(e)}getVerificationRequestsToDeviceInProgress(e){return this.olmMachine.getVerificationRequests(new r.UserId(e)).filter((e=>void 0===e.roomId)).map((e=>new A(this.olmMachine,e,this.outgoingRequestProcessor,this._supportedVerificationMethods)))}findVerificationRequestDMInProgress(e,t){if(!t)throw new Error("missing userId");const s=this.olmMachine.getVerificationRequests(new r.UserId(t)).find((t=>{var s;return(null===(s=t.roomId)||void 0===s?void 0:s.toString())===e}));if(s)return new A(this.olmMachine,s,this.outgoingRequestProcessor,this._supportedVerificationMethods)}async requestVerificationDM(e,t){const s=await this.olmMachine.getIdentity(new r.UserId(e));if(!s)throw new Error(`unknown userId ${e}`);try{const e=this._supportedVerificationMethods.map((e=>j(e))),i=await s.verificationRequestContent(e),n=await this.sendVerificationRequestContent(t,i),o=await s.requestVerification(new r.RoomId(t),new r.EventId(n),e);return new A(this.olmMachine,o,this.outgoingRequestProcessor,this._supportedVerificationMethods)}finally{s.free()}}async sendVerificationRequestContent(e,t){const s=(0,Q.DU)(32),{event_id:i}=await this.http.authedRequest(g.IT.Put,`/_matrix/client/v3/rooms/${encodeURIComponent(e)}/send/m.room.message/${encodeURIComponent(s)}`,void 0,t,{prefix:""});return i}setSupportedVerificationMethods(e){this._supportedVerificationMethods=null!=e?e:ne}async requestOwnUserVerification(){const e=await this.olmMachine.getIdentity(new r.UserId(this.userId));if(void 0===e)throw new Error("cannot request verification for this device when there is no existing cross-signing key");try{const[t,s]=await e.requestVerification(this._supportedVerificationMethods.map(j));return await this.outgoingRequestProcessor.makeOutgoingRequest(s),new A(this.olmMachine,t,this.outgoingRequestProcessor,this._supportedVerificationMethods)}finally{e.free()}}async requestDeviceVerification(e,t){const s=await this.olmMachine.getDevice(new r.UserId(e),new r.DeviceId(t));if(!s)throw new Error("Not a known device");try{const[e,t]=s.requestVerification(this._supportedVerificationMethods.map(j));return await this.outgoingRequestProcessor.makeOutgoingRequest(t),new A(this.olmMachine,e,this.outgoingRequestProcessor,this._supportedVerificationMethods)}finally{s.free()}}async getSessionBackupPrivateKey(){const e=await this.olmMachine.getBackupKeys();return e.decryptionKey?se.from(e.decryptionKey.toBase64(),"base64"):null}async storeSessionBackupPrivateKey(e,t){const s=(0,v.WG)(e);if(!t)throw new Error("storeSessionBackupPrivateKey: version is required");await this.backupManager.saveBackupDecryptionKey(r.BackupDecryptionKey.fromBase64(s),t)}async getActiveSessionBackupVersion(){return await this.backupManager.getActiveBackupVersion()}async isKeyBackupTrusted(e){return await this.backupManager.isKeyBackupTrusted(e)}async checkKeyBackupAndEnable(){return await this.backupManager.checkKeyBackupAndEnable(!0)}async deleteKeyBackupVersion(e){await this.backupManager.deleteKeyBackupVersion(e)}async resetKeyBackup(){const e=await this.backupManager.setupKeyBackup((e=>this.signObject(e)));await this.secretStorageHasAESKey()&&await this.secretStorage.store("m.megolm_backup.v1",e.decryptionKey.toBase64()),this.checkKeyBackupAndEnable()}async signObject(e){const t=new Map(Object.entries(e.signatures||{})),s=e.unsigned;delete e.signatures,delete e.unsigned;const i=t.get(this.userId)||{},r=o().stringify(e),n=await this.olmMachine.sign(r),a=JSON.parse(n.asJSON());t.set(this.userId,re(re({},i),a[this.userId])),void 0!==s&&(e.unsigned=s),e.signatures=Object.fromEntries(t.entries())}async isDehydrationSupported(){return await this.dehydratedDeviceManager.isSupported()}async startDehydration(e){if(!await this.isCrossSigningReady()||!await this.isSecretStorageReady())throw new Error("Device dehydration requires cross-signing and secret storage to be set up");return await this.dehydratedDeviceManager.start(e)}async importSecretsBundle(e){const t=r.SecretsBundle.from_json(e);await this.getOlmMachineOrThrow().importSecretsBundle(t)}async exportSecretsBundle(){const e=await this.getOlmMachineOrThrow().exportSecretsBundle(),t=e.to_json();return e.free(),t}async receiveSyncChanges({events:e,oneTimeKeysCounts:t=new Map,unusedFallbackKeys:s,devices:i=new r.DeviceLists}){const n=await(0,y.NQ)(d.v,"receiveSyncChanges",(async()=>await this.olmMachine.receiveSyncChanges(e?JSON.stringify(e):"[]",i,t,s)));return JSON.parse(n)}async preprocessToDeviceMessages(e){const t=await this.receiveSyncChanges({events:e});for(const e of t)if(e.type===h.Bx.KeyVerificationRequest){const t=e.sender,s=e.content.transaction_id;s&&t&&this.onIncomingKeyVerificationRequest(t,s)}return t}async processKeyCounts(e,t){const s=e&&new Map(Object.entries(e)),i=t&&new Set(t);void 0===s&&void 0===i||await this.receiveSyncChanges({oneTimeKeysCounts:s,unusedFallbackKeys:i})}async processDeviceLists(e){var t,s;const i=new r.DeviceLists(null===(t=e.changed)||void 0===t?void 0:t.map((e=>new r.UserId(e))),null===(s=e.left)||void 0===s?void 0:s.map((e=>new r.UserId(e))));await this.receiveSyncChanges({devices:i})}async onCryptoEvent(e,t){const s=t.getContent(),i=new r.RoomSettings;if("m.megolm.v1.aes-sha2"!==s.algorithm)return void this.logger.warn(`Room ${e.roomId}: ignoring crypto event with invalid algorithm ${s.algorithm}`);i.algorithm=r.EncryptionAlgorithm.MegolmV1AesSha2;try{i.sessionRotationPeriodMs=s.rotation_period_ms,i.sessionRotationPeriodMessages=s.rotation_period_msgs,await this.olmMachine.setRoomSettings(new r.RoomId(e.roomId),i)}catch(t){return void this.logger.warn(`Room ${e.roomId}: ignoring crypto event which caused error: ${t}`)}const n=this.roomEncryptors[e.roomId];n?n.onCryptoEvent(s):this.roomEncryptors[e.roomId]=new m(this.olmMachine,this.keyClaimManager,this.outgoingRequestsManager,e,s)}onSyncCompleted(e){this.outgoingRequestsManager.doProcessOutgoingRequests().catch((e=>{this.logger.warn("onSyncCompleted: Error processing outgoing requests",e)}))}onIncomingKeyVerificationRequest(e,t){const s=this.olmMachine.getVerificationRequest(new r.UserId(e),t);s?this.emit($.cr.VerificationRequestReceived,new A(this.olmMachine,s,this.outgoingRequestProcessor,this._supportedVerificationMethods)):this.logger.info(`Ignoring just-received verification request ${t} which did not start a rust-side verification`)}onRoomMembership(e,t,s){const i=this.roomEncryptors[e.getRoomId()];i&&i.onRoomMembership(t)}async onRoomKeysUpdated(e){for(const t of e)this.onRoomKeyUpdated(t);this.backupManager.maybeUploadKey()}onRoomKeyUpdated(e){if(this.stopped)return;this.logger.debug(`Got update for session ${e.senderKey.toBase64()}|${e.sessionId} in ${e.roomId.toString()}`);const t=this.eventDecryptor.getEventsPendingRoomKey(e.roomId.toString(),e.sessionId);if(0!==t.length){this.logger.debug("Retrying decryption on events:",t.map((e=>`${e.getId()}`)));for(const e of t)e.attemptDecryption(this,{isRetry:!0}).catch((t=>{this.logger.info(`Still unable to decrypt event ${e.getId()} after receiving key`)}))}}async onRoomKeysWithheld(e){for(const t of e){this.logger.debug(`Got withheld message for session ${t.sessionId} in ${t.roomId.toString()}`);const e=this.eventDecryptor.getEventsPendingRoomKey(t.roomId.toString(),t.sessionId);if(0===e.length)return;this.logger.debug("Retrying decryption on events:",e.map((e=>`${e.getId()}`)));for(const t of e)t.attemptDecryption(this,{isRetry:!0}).catch((e=>{}))}}async onUserIdentityUpdated(e){const t=await this.getUserVerificationStatus(e.toString());this.emit($.cr.UserTrustStatusChanged,e.toString(),t),e.toString()===this.userId&&(this.emit($.cr.KeysChanged,{}),await this.checkKeyBackupAndEnable())}async onDevicesUpdated(e){this.emit($.cr.WillUpdateDevices,e,!1),this.emit($.cr.DevicesUpdated,e,!1)}async handleSecretReceived(e,t){return this.logger.debug(`onReceiveSecret: Received secret ${e}`),"m.megolm_backup.v1"===e&&await this.backupManager.handleBackupSecretReceived(t)}async checkSecrets(e){const t=await this.olmMachine.getSecretsFromInbox(e);for(const s of t)if(await this.handleSecretReceived(e,s))break;await this.olmMachine.deleteSecretsFromInbox(e)}async onLiveEventFromSync(e){if(e.isState()||e.getUnsigned().transaction_id)return;const t=async t=>{(function(e){switch(e.getType()){case h.Bx.KeyVerificationCancel:case h.Bx.KeyVerificationDone:case h.Bx.KeyVerificationMac:case h.Bx.KeyVerificationStart:case h.Bx.KeyVerificationKey:case h.Bx.KeyVerificationReady:case h.Bx.KeyVerificationAccept:return!0;case h.Bx.RoomMessage:return e.getContent().msgtype===h.Wr.KeyVerificationRequest;default:return!1}})(e)&&await this.onKeyVerificationEvent(t)};if(e.isDecryptionFailure()||e.isEncrypted()){const s=setTimeout((()=>e.off(c.OQ.Decrypted,i)),3e5),i=(r,n)=>{n||(clearTimeout(s),e.off(c.OQ.Decrypted,i),t(r))};e.on(c.OQ.Decrypted,i)}else await t(e)}async onKeyVerificationEvent(e){const t=e.getRoomId();if(!t)throw new Error("missing roomId in the event");this.logger.debug(`Incoming verification event ${e.getId()} type ${e.getType()} from ${e.getSender()}`),await this.olmMachine.receiveVerificationEvent(JSON.stringify({event_id:e.getId(),type:e.getType(),sender:e.getSender(),state_key:e.getStateKey(),content:e.getContent(),origin_server_ts:e.getTs()}),new r.RoomId(t)),e.getType()===h.Bx.RoomMessage&&e.getContent().msgtype===h.Wr.KeyVerificationRequest&&this.onIncomingKeyVerificationRequest(e.getSender(),e.getId()),this.outgoingRequestsManager.doProcessOutgoingRequests().catch((e=>{this.logger.warn("onKeyVerificationRequest: Error processing outgoing requests",e)}))}async getOwnIdentity(){return await this.olmMachine.getIdentity(new r.UserId(this.userId))}}class ae{constructor(e,t,s){(0,i.A)(this,"eventsPendingKey",new y.kG((()=>new y.kG((()=>new Set))))),this.logger=e,this.olmMachine=t,this.perSessionBackupDownloader=s}async attemptEventDecryption(e,t){let s;switch(this.addEventToPendingList(e),t.kind){case p.DeviceIsolationModeKind.AllDevicesIsolationMode:s=r.TrustRequirement.Untrusted;break;case p.DeviceIsolationModeKind.OnlySignedDevicesIsolationMode:s=r.TrustRequirement.CrossSignedOrLegacy}try{const t=await this.olmMachine.decryptRoomEvent(ce(e),new r.RoomId(e.getRoomId()),new r.DecryptionSettings(s));return this.removeEventFromPendingList(e),{clearEvent:JSON.parse(t.event),claimedEd25519Key:t.senderClaimedEd25519Key,senderCurve25519Key:t.senderCurve25519Key,forwardingCurve25519KeyChain:t.forwardingCurve25519KeyChain}}catch(t){if(!(t instanceof r.MegolmDecryptionError))throw new u.O(p.DecryptionFailureCode.UNKNOWN_ERROR,"Unknown error");this.onMegolmDecryptionError(e,t,await this.perSessionBackupDownloader.getServerBackupInfo())}}onMegolmDecryptionError(e,t,s){const i=e.getWireContent(),n={session:i.sender_key+"|"+i.session_id};if(t.code===r.DecryptionErrorCode.MissingRoomKey||t.code===r.DecryptionErrorCode.UnknownMessageIndex){this.perSessionBackupDownloader.onDecryptionKeyMissingError(e.getRoomId(),i.session_id);const t=e.getMembershipAtEvent();if(t&&t!==a.O.Join&&t!==a.O.Invite)throw new u.O(p.DecryptionFailureCode.HISTORICAL_MESSAGE_USER_NOT_JOINED,"This message was sent when we were not a member of the room.",n);if(e.getTs()<=this.olmMachine.deviceCreationTimeMs)throw null===s?new u.O(p.DecryptionFailureCode.HISTORICAL_MESSAGE_NO_KEY_BACKUP,"This message was sent before this device logged in, and there is no key backup on the server.",n):this.perSessionBackupDownloader.isKeyBackupDownloadConfigured()?new u.O(p.DecryptionFailureCode.HISTORICAL_MESSAGE_WORKING_BACKUP,"This message was sent before this device logged in. Key backup is working, but we still do not (yet) have the key.",n):new u.O(p.DecryptionFailureCode.HISTORICAL_MESSAGE_BACKUP_UNCONFIGURED,"This message was sent before this device logged in, and key backup is not working.",n)}if(t.maybe_withheld){const e="The sender has disabled encrypting to unverified devices."===t.maybe_withheld?p.DecryptionFailureCode.MEGOLM_KEY_WITHHELD_FOR_UNVERIFIED_DEVICE:p.DecryptionFailureCode.MEGOLM_KEY_WITHHELD;throw new u.O(e,t.maybe_withheld,n)}switch(t.code){case r.DecryptionErrorCode.MissingRoomKey:throw new u.O(p.DecryptionFailureCode.MEGOLM_UNKNOWN_INBOUND_SESSION_ID,"The sender's device has not sent us the keys for this message.",n);case r.DecryptionErrorCode.UnknownMessageIndex:throw new u.O(p.DecryptionFailureCode.OLM_UNKNOWN_MESSAGE_INDEX,"The sender's device has not sent us the keys for this message at this index.",n);case r.DecryptionErrorCode.SenderIdentityPreviouslyVerified:throw this.removeEventFromPendingList(e),new u.O(p.DecryptionFailureCode.SENDER_IDENTITY_PREVIOUSLY_VERIFIED,"The sender identity is unverified, but was previously verified.");case r.DecryptionErrorCode.UnknownSenderDevice:throw this.removeEventFromPendingList(e),new u.O(p.DecryptionFailureCode.UNKNOWN_SENDER_DEVICE,"The sender device is not known.");case r.DecryptionErrorCode.UnsignedSenderDevice:throw this.removeEventFromPendingList(e),new u.O(p.DecryptionFailureCode.UNSIGNED_SENDER_DEVICE,"The sender identity is not cross-signed.");default:throw new u.O(p.DecryptionFailureCode.UNKNOWN_ERROR,t.description,n)}}async getEncryptionInfoForEvent(e){if(!e.getClearContent()||e.isDecryptionFailure())return null;if(null!==e.status)return{shieldColour:p.EventShieldColour.NONE,shieldReason:null};const t=await this.olmMachine.getRoomEventEncryptionInfo(ce(e),new r.RoomId(e.getRoomId()));return function(e,t){if(void 0===t)return null;const s=t.shieldState(!1);let i,n;switch(s.color){case r.ShieldColor.Grey:i=p.EventShieldColour.GREY;break;case r.ShieldColor.None:i=p.EventShieldColour.NONE;break;default:i=p.EventShieldColour.RED}void 0===s.message?n=null:"Encrypted by an unverified user."===s.message?n=p.EventShieldReason.UNVERIFIED_IDENTITY:"Encrypted by a device not verified by its owner."===s.message?n=p.EventShieldReason.UNSIGNED_DEVICE:"The authenticity of this encrypted message can't be guaranteed on this device."===s.message?n=p.EventShieldReason.AUTHENTICITY_NOT_GUARANTEED:"Encrypted by an unknown or deleted device."===s.message?n=p.EventShieldReason.UNKNOWN_DEVICE:(e.warn(`Unknown shield state message '${s.message}'`),n=p.EventShieldReason.UNKNOWN);return{shieldColour:i,shieldReason:n}}(this.logger,t)}getEventsPendingRoomKey(e,t){const s=this.eventsPendingKey.get(e);if(!s)return[];const i=s.get(t);return i?[...i]:[]}addEventToPendingList(e){const t=e.getRoomId();if(!t)return;this.eventsPendingKey.getOrCreate(t).getOrCreate(e.getWireContent().session_id).add(e)}removeEventFromPendingList(e){const t=e.getRoomId();if(!t)return;const s=this.eventsPendingKey.getOrCreate(t);if(!s)return;const i=s.get(e.getWireContent().session_id);i&&(i.delete(e),0===i.size&&(s.delete(e.getWireContent().session_id),0===s.size&&this.eventsPendingKey.delete(t)))}}function ce(e){return JSON.stringify({event_id:e.getId(),type:e.getWireType(),sender:e.getSender(),state_key:e.getStateKey(),content:e.getWireContent(),origin_server_ts:e.getTs()})}var ue=s("./node_modules/matrix-js-sdk/src/crypto/store/base.ts"),de=s("./node_modules/matrix-js-sdk/src/crypto/store/indexeddb-crypto-store.ts"),ge=s("./node_modules/matrix-js-sdk/src/utils/decryptAESSecretStorageItem.ts");async function he(e){var t;const{logger:s,legacyStore:i}=e;if(await r.initAsync(),new r.Tracing(r.LoggerLevel.Debug).turnOn(),!await i.containsData())return;await i.startup();let n=null;if(await i.doTxn("readonly",[de.y.STORE_ACCOUNT],(e=>{i.getAccount(e,(e=>{n=e}))})),!n)return void s.debug("Legacy crypto store is not set up (no account found). Not migrating.");let o=await i.getMigrationState();if(o>=ue.Il.MEGOLM_SESSIONS_MIGRATED)return;const a=await async function(e,t){let s;return e.debug("Counting olm sessions to be migrated"),await t.doTxn("readonly",[de.y.STORE_SESSIONS],(e=>t.countEndToEndSessions(e,(e=>s=e)))),s}(s,i),c=await async function(e,t){return e.debug("Counting megolm sessions to be migrated"),await t.countEndToEndInboundGroupSessions()}(s,i),u=1+a+c;s.info(`Migrating data from legacy crypto store. ${a} olm sessions and ${c} megolm sessions to migrate.`);let d=0;function g(t){var s;d+=t,null===(s=e.legacyMigrationProgressListener)||void 0===s||s.call(e,d,u)}g(0);const h=(new TextEncoder).encode(e.legacyPickleKey);o===ue.Il.NOT_STARTED&&(s.info("Migrating data from legacy crypto store. Step 1: base data"),await async function(e,t,s,i,n,o,a){const c=new r.BaseMigrationData;c.userId=new r.UserId(t),c.deviceId=new r.DeviceId(s),await i.doTxn("readonly",[de.y.STORE_ACCOUNT],(e=>i.getAccount(e,(e=>{c.pickledAccount=null!=e?e:""}))));const u=await le(i,n,"m.megolm_backup.v1");if(u){let t=!1,s=null;for(;!t;)try{s=await W(e),t=!0}catch(e){a.info("Failed to get backup version during migration, retrying in 2 seconds",e),await(0,y.yy)(2e3)}if(s&&"m.megolm_backup.v1.curve25519-aes-sha2"==s.algorithm)try{var d;const e=r.BackupDecryptionKey.fromBase64(u),t=null===(d=s.auth_data)||void 0===d?void 0:d.public_key;e.megolmV1PublicKey.publicKeyBase64==t?(c.backupVersion=s.version,c.backupRecoveryKey=u):a.debug("The backup key to migrate does not match the active backup version",`Cached pub key: ${e.megolmV1PublicKey.publicKeyBase64}`,`Active pub key: ${t}`)}catch(e){a.warn("Failed to check if the backup key to migrate matches the active backup version",e)}}c.privateCrossSigningMasterKey=await le(i,n,"master"),c.privateCrossSigningSelfSigningKey=await le(i,n,"self_signing"),c.privateCrossSigningUserSigningKey=await le(i,n,"user_signing"),await r.Migration.migrateBaseData(c,n,o)}(e.http,e.userId,e.deviceId,i,h,e.storeHandle,s),o=ue.Il.INITIAL_DATA_MIGRATED,await i.setMigrationState(o)),g(1),o===ue.Il.INITIAL_DATA_MIGRATED&&(s.info(`Migrating data from legacy crypto store. Step 2: olm sessions (${a} sessions to migrate).`),await async function(e,t,s,i,n){for(;;){const o=await t.getEndToEndSessionsBatch();if(null===o)return;e.debug(`Migrating batch of ${o.length} olm sessions`);const a=[];for(const e of o){const t=new r.PickledSession;t.senderKey=e.deviceKey,t.pickle=e.session,t.lastUseTime=t.creationTime=new Date(e.lastReceivedMessageTs),a.push(t)}await r.Migration.migrateOlmSessions(a,s,i),await t.deleteEndToEndSessionsBatch(o),n(o.length)}}(s,i,h,e.storeHandle,g),o=ue.Il.OLM_SESSIONS_MIGRATED,await i.setMigrationState(o)),o===ue.Il.OLM_SESSIONS_MIGRATED&&(s.info(`Migrating data from legacy crypto store. Step 3: megolm sessions (${c} sessions to migrate).`),await async function(e,t,s,i,n){for(;;){const a=await t.getEndToEndInboundGroupSessionsBatch();if(null===a)return;e.debug(`Migrating batch of ${a.length} megolm sessions`);const c=[];for(const e of a){var o;const t=e.sessionData,s=new r.PickledInboundGroupSession;s.pickle=t.session,s.roomId=new r.RoomId(t.room_id),s.senderKey=e.senderKey,s.senderSigningKey=null===(o=t.keysClaimed)||void 0===o?void 0:o.ed25519,s.backedUp=!e.needsBackup,s.imported=!0===t.untrusted,c.push(s)}await r.Migration.migrateMegolmSessions(c,s,i),await t.deleteEndToEndInboundGroupSessionsBatch(a),n(a.length)}}(s,i,h,e.storeHandle,g),o=ue.Il.MEGOLM_SESSIONS_MIGRATED,await i.setMigrationState(o)),null===(t=e.legacyMigrationProgressListener)||void 0===t||t.call(e,-1,-1),s.info("Migration from legacy crypto store complete")}async function le(e,t,s){const i=await new Promise((t=>{e.doTxn("readonly",[de.y.STORE_ACCOUNT],(i=>{e.getSecretStorePrivateKey(i,t,s)}))}));return i&&i.ciphertext&&i.iv&&i.mac?await(0,ge.A)(i,t,s):i instanceof Uint8Array?(0,v.WG)(i):void 0}async function ye(e){const{legacyCryptoStore:t,rustCrypto:s,logger:i}=e,r=await s.getOwnIdentity();if(!r)return;if(r.isVerified())return;const n=await async function(e){let t=null;return await e.doTxn("readonly","account",(s=>{e.getCrossSigningKeys(s,(e=>{const s=null==e?void 0:e.master;s&&0!=Object.keys(s.keys).length&&(t=Object.values(s.keys)[0])}))})),t}(t);if(!n)return;const o=JSON.parse(r.masterKey);if(!o.keys||0===Object.keys(o.keys).length)return void i.error("Post Migration | Unexpected error: no master key in the rust session.");const a=Object.values(o.keys)[0];a&&a==n&&(i.info(`Post Migration: Migrating legacy trusted MSK: ${n} to locally verified.`),await r.verify())}function pe(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,i)}return s}async function me(e){const{logger:t}=e;let s;t.debug("Initialising Rust crypto-sdk WASM artifact"),await r.initAsync(),new r.Tracing(r.LoggerLevel.Debug).turnOn(),t.debug("Opening Rust CryptoStore"),s=e.storePrefix?e.storeKey?await r.StoreHandle.openWithKey(e.storePrefix,e.storeKey):await r.StoreHandle.open(e.storePrefix,e.storePassphrase):await r.StoreHandle.open(),e.legacyCryptoStore&&await he(function(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?pe(Object(s),!0).forEach((function(t){(0,i.A)(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):pe(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}({legacyStore:e.legacyCryptoStore,storeHandle:s},e));const n=await async function(e,t,s,i,n,o,a,c){e.debug("Init OlmMachine");const u=await r.OlmMachine.initFromStore(new r.UserId(s),new r.DeviceId(i),a);c&&await async function({logger:e,legacyStore:t,olmMachine:s}){if(!await t.containsData())return;if(await t.getMigrationState()>=ue.Il.ROOM_SETTINGS_MIGRATED)return;let i={};await t.doTxn("readwrite",[de.y.STORE_ROOMS],(e=>{t.getEndToEndRooms(e,(e=>{i=e}))})),e.debug(`Migrating ${Object.keys(i).length} sets of room settings`);for(const[t,n]of Object.entries(i))try{const i=new r.RoomSettings;if("m.megolm.v1.aes-sha2"!==n.algorithm){e.warn(`Room ${t}: ignoring room with invalid algorithm ${n.algorithm}`);continue}i.algorithm=r.EncryptionAlgorithm.MegolmV1AesSha2,i.sessionRotationPeriodMs=n.rotation_period_ms,i.sessionRotationPeriodMessages=n.rotation_period_msgs,await s.setRoomSettings(new r.RoomId(t),i)}catch(s){e.warn(`Room ${t}: ignoring settings ${JSON.stringify(n)} which caused error ${s}`)}e.debug("Completed room settings migration"),await t.setMigrationState(ue.Il.ROOM_SETTINGS_MIGRATED)}({logger:e,legacyStore:c,olmMachine:u});u.roomKeyRequestsEnabled=!1;const d=new oe(e,u,t,s,i,n,o);if(await u.registerRoomKeyUpdatedCallback((e=>d.onRoomKeysUpdated(e))),await u.registerRoomKeysWithheldCallback((e=>d.onRoomKeysWithheld(e))),await u.registerUserIdentityUpdatedCallback((e=>d.onUserIdentityUpdated(e))),await u.registerDevicesUpdatedCallback((e=>d.onDevicesUpdated(e))),d.checkSecrets("m.megolm_backup.v1"),await u.registerReceiveSecretCallback(((e,t)=>d.checkSecrets(e))),await u.outgoingRequests(),c&&await c.containsData()){if(await c.getMigrationState()<ue.Il.INITIAL_OWN_KEY_QUERY_DONE){e.debug("Performing initial key query after migration");let t=!1;for(;!t;)try{await d.userHasCrossSigningKeys(s),t=!0}catch(t){e.error("Failed to check for cross-signing keys after migration, retrying",t)}await ye({legacyCryptoStore:c,rustCrypto:d,logger:e}),await c.setMigrationState(ue.Il.INITIAL_OWN_KEY_QUERY_DONE)}}return d}(t,e.http,e.userId,e.deviceId,e.secretStorage,e.cryptoCallbacks,s,e.legacyCryptoStore);return s.free(),t.debug("Completed rust crypto-sdk setup"),n}},"./node_modules/matrix-js-sdk/src/store/memory.ts":(e,t,s)=>{s.d(t,{n:()=>c});var i=s("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),r=s("./node_modules/matrix-js-sdk/src/models/room-state.ts"),n=s("./node_modules/matrix-js-sdk/src/utils.ts"),o=s("./node_modules/matrix-js-sdk/src/@types/membership.ts");function a(e){return"string"==typeof e&&!!e&&"undefined"!==e&&"null"!==e||"number"==typeof e}class c{constructor(e={}){(0,i.A)(this,"rooms",{}),(0,i.A)(this,"users",{}),(0,i.A)(this,"syncToken",null),(0,i.A)(this,"filters",new n.kG((()=>new Map))),(0,i.A)(this,"accountData",new Map),(0,i.A)(this,"localStorage",void 0),(0,i.A)(this,"oobMembers",new Map),(0,i.A)(this,"pendingEvents",{}),(0,i.A)(this,"clientOptions",void 0),(0,i.A)(this,"pendingToDeviceBatches",[]),(0,i.A)(this,"nextToDeviceBatchId",0),(0,i.A)(this,"createUser",void 0),(0,i.A)(this,"onRoomMember",((e,t,s)=>{var i;if(s.membership===o.O.Invite)return;const r=this.users[s.userId]||(null===(i=this.createUser)||void 0===i?void 0:i.call(this,s.userId));s.name&&(r.setDisplayName(s.name),s.events.member&&r.setRawDisplayName(s.events.member.getDirectionalContent().displayname)),s.events.member&&s.events.member.getContent().avatar_url&&r.setAvatarUrl(s.events.member.getContent().avatar_url),this.users[r.userId]=r})),this.localStorage=e.localStorage}getSyncToken(){return this.syncToken}isNewlyCreated(){return Promise.resolve(!0)}setSyncToken(e){this.syncToken=e}storeRoom(e){this.rooms[e.roomId]=e,e.currentState.on(r.f.Members,this.onRoomMember),e.currentState.getMembers().forEach((t=>{this.onRoomMember(null,e.currentState,t)}))}setUserCreator(e){this.createUser=e}getRoom(e){return this.rooms[e]||null}getRooms(){return Object.values(this.rooms)}removeRoom(e){this.rooms[e]&&this.rooms[e].currentState.removeListener(r.f.Members,this.onRoomMember),delete this.rooms[e]}getRoomSummaries(){return Object.values(this.rooms).map((function(e){return e.summary}))}storeUser(e){this.users[e.userId]=e}getUser(e){return this.users[e]||null}getUsers(){return Object.values(this.users)}scrollback(e,t){return[]}storeEvents(e,t,s,i){}storeFilter(e){null!=e&&e.userId&&null!=e&&e.filterId&&this.filters.getOrCreate(e.userId).set(e.filterId,e)}getFilter(e,t){var s;return(null===(s=this.filters.get(e))||void 0===s?void 0:s.get(t))||null}getFilterIdByName(e){if(!this.localStorage)return null;const t="mxjssdk_memory_filter_"+e;try{const e=this.localStorage.getItem(t);if(a(e))return e}catch(e){}return null}setFilterIdByName(e,t){if(!this.localStorage)return;const s="mxjssdk_memory_filter_"+e;try{a(t)?this.localStorage.setItem(s,t):this.localStorage.removeItem(s)}catch(e){}}storeAccountDataEvents(e){e.forEach((e=>{!Object.keys(e.getContent()).length?this.accountData.delete(e.getType()):this.accountData.set(e.getType(),e)}))}getAccountData(e){return this.accountData.get(e)}setSyncData(e){return Promise.resolve()}wantsSave(){return!1}save(e){return Promise.resolve()}startup(){return Promise.resolve()}getSavedSync(){return Promise.resolve(null)}getSavedSyncToken(){return Promise.resolve(null)}deleteAllData(){return this.rooms={},this.users={},this.syncToken=null,this.filters=new n.kG((()=>new Map)),this.accountData=new Map,Promise.resolve()}getOutOfBandMembers(e){return Promise.resolve(this.oobMembers.get(e)||null)}setOutOfBandMembers(e,t){return this.oobMembers.set(e,t),Promise.resolve()}clearOutOfBandMembers(e){return this.oobMembers.delete(e),Promise.resolve()}getClientOptions(){return Promise.resolve(this.clientOptions)}storeClientOptions(e){return this.clientOptions=Object.assign({},e),Promise.resolve()}async getPendingEvents(e){var t;return null!==(t=this.pendingEvents[e])&&void 0!==t?t:[]}async setPendingEvents(e,t){this.pendingEvents[e]=t}saveToDeviceBatches(e){for(const t of e)this.pendingToDeviceBatches.push({id:this.nextToDeviceBatchId++,eventType:t.eventType,txnId:t.txnId,batch:t.batch});return Promise.resolve()}async getOldestToDeviceBatch(){return 0===this.pendingToDeviceBatches.length?null:this.pendingToDeviceBatches[0]}removeToDeviceBatch(e){return this.pendingToDeviceBatches=this.pendingToDeviceBatches.filter((t=>t.id!==e)),Promise.resolve()}async destroy(){}}}}]);
//# sourceMappingURL=4513.js.map